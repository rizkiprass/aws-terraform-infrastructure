module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "5.1.1"
  # insert the 14 required variables here
  name                             = format("%s-%s-%s", var.customer, var.project, var.environment)
  cidr                             = var.cidr
  enable_dns_hostnames             = true
  enable_dhcp_options              = true
  dhcp_options_domain_name_servers = ["AmazonProvidedDNS"]
  azs                              = ["${var.region}a", "${var.region}b"]
  public_subnets                   = [var.Public_Subnet_AZA, var.Public_Subnet_AZB]
  private_subnets                  = [var.Private_Subnet_AZA, var.Private_Subnet_AZB]
  #   intra_subnets                    = [var.Data_Subnet_AZ1, var.Data_Subnet_AZ2] //
#  database_subnets = [var.Data_Subnet_AZA, var.Data_Subnet_AZB] //
  # Nat Gateway
  enable_nat_gateway = true
  single_nat_gateway = true #if true, nat gateway only create one
  #  # Reuse NAT IPs
  #  reuse_nat_ips = false # <= if true, Skip creation of EIPs for the NAT Gateways
  #  external_nat_ip_ids   = [aws_eip.eip-nat.id] #attach eip from manual create eip
  public_subnet_suffix   = "public-subnet"
  private_subnet_suffix  = "private-subnet"
#  database_subnet_suffix = "data-subnet"
  #  intra_subnet_suffix = "data-subnet"
#  create_database_subnet_route_table = true //created without 0.0.0.0 route to nat
  #Virtual Private Gateway
  #  enable_vpn_gateway = true

  #  customer_gateways = {
  #    IP1 = {
  #      bgp_asn     = 65000
  #      ip_address  = "1.2.3.4"
  #      device_name = "some_name"
  #    },
  ##    IP2 = {
  ##      bgp_asn    = 65112
  ##      ip_address = "5.6.7.8"
  ##    }
  #  }

  nat_gateway_tags = {
    Name = format("%s-%s-%s-nat", var.customer, var.project, var.environment)
  }

  nat_eip_tags = {
    Name = format("%s-%s-%s-nat-eip", var.customer, var.project, var.environment)
  }
  tags = local.common_tags
  #    # VPC Flow Logs (Cloudwatch log group and IAM role will be created)
  #    enable_flow_log                      = true
  #    create_flow_log_cloudwatch_log_group = false
  #    create_flow_log_cloudwatch_iam_role  = true
  #    flow_log_max_aggregation_interval    = 60
  #    flow_log_cloudwatch_log_group_kms_key_id = module.kms-cwatch-flowlogs-kms.key_arn



  #  //tags for vpc flow logs
  #  vpc_flow_log_tags = {
  #    Name = format("%s-%s-vpc-flowlogs", var.project, var.environment)
  #  }
}

#//eip for nat
#resource "aws_eip" "eip-nat" {
#  vpc = true
#  tags = merge(local.common_tags, {
#    Name = format("%s-%s-EIP", var.project, var.environment)
#  })
#}

resource "aws_vpc_endpoint" "s3" {
  vpc_id       = module.vpc.vpc_id
  service_name = "com.amazonaws.${var.region}.s3"

  tags = merge(local.common_tags, {
    Name = format("%s-%s-%s-s3-gateway-endpoint", var.customer, var.project, var.environment)
  })
}

#resource "aws_eip" "eip-nat2-sandbox" {
#  vpc = true
#  tags = merge(local.common_tags, {
#    Name = format("%s-production-EIP2", var.project)
#  })
#}

#//Create a db subnet with routing to nat
#resource "aws_subnet" "subnet-db-1a" {
#  vpc_id            = module.vpc.vpc_id
#  cidr_block        = var.Data_Subnet_AZA
#  availability_zone = format("%sa", var.aws_region)
#
#  tags = merge(local.common_tags,
#    {
#      Name = format("%s-%s-data-subnet-3a", var.project, var.environment) //
#  })
#}
#
#resource "aws_subnet" "subnet-db-1b" {
#  vpc_id            = module.vpc.vpc_id
#  cidr_block        = var.Data_Subnet_AZB
#  availability_zone = format("%sb", var.aws_region)
#
#  tags = merge(local.common_tags,
#    {
#      Name = format("%s-%s-data-subnet-3b", var.project, var.environment) //
#  })
#}
#
#resource "aws_route_table" "data-rt" {
#  vpc_id = module.vpc.vpc_id
#  route {
#    cidr_block = "0.0.0.0/0"
#    gateway_id = module.vpc.natgw_ids[0]
#  }
#
#  tags = merge(local.common_tags, {
#    Name = format("%s-%s-data-rt", var.project, var.environment)
#  })
#}
#
#resource "aws_route_table_association" "rt-subnet-assoc-data-3a" {
#  subnet_id      = aws_subnet.subnet-db-1a.id
#  route_table_id = aws_route_table.data-rt.id
#}
#
#//Create a app subnet
#resource "aws_subnet" "subnet-app-1a" {
#  vpc_id            = module.vpc.vpc_id
#  cidr_block        = var.App_Subnet_AZA
#  availability_zone = format("%sa", var.aws_region)
#
#  tags = merge(local.common_tags,
#    {
#      Name = format("%s-%s-app-subnet-3a", var.project, var.environment) //
#  })
#}
#
#resource "aws_subnet" "subnet-app-1b" {
#  vpc_id            = module.vpc.vpc_id
#  cidr_block        = var.App_Subnet_AZB
#  availability_zone = format("%sb", var.aws_region)
#
#  tags = merge(local.common_tags,
#    {
#      Name = format("%s-%s-app-subnet-3b", var.project, var.environment) //
#  })
#}
#
#resource "aws_route_table" "app-rt" {
#  vpc_id = module.vpc.vpc_id
#  route {
#    cidr_block = "0.0.0.0/0"
#    gateway_id = module.vpc.natgw_ids[0]
#  }
#
#  tags = merge(local.common_tags, {
#    Name = format("%s-%s-app-rt", var.project, var.environment)
#  })
#}
#
#resource "aws_route_table_association" "rt-subnet-assoc-app-3a" {
#  subnet_id      = aws_subnet.subnet-app-1a.id
#  route_table_id = aws_route_table.app-rt.id
#}

//Create a tgw subnet
resource "aws_subnet" "subnet-tgw-3a" {
  vpc_id            = module.vpc.vpc_id
  cidr_block        = var.TGW_Subnet_AZA
  availability_zone = format("%sa", var.region)

  tags = merge(local.common_tags,
    {
      Name = format("%s-%s-tgw-subnet-3a", var.project, var.environment) //
  })
}

resource "aws_subnet" "subnet-tgw-3c" {
  vpc_id            = module.vpc.vpc_id
  cidr_block        = var.TGW_Subnet_AZC
  availability_zone = format("%sc", var.region)

  tags = merge(local.common_tags,
    {
      Name = format("%s-%s-tgw-subnet-3c", var.project, var.environment) //
  })
}

resource "aws_route_table" "tgw-rt" {
  vpc_id = module.vpc.vpc_id
#  route {
#    cidr_block = "0.0.0.0/0"
#    gateway_id = module.vpc.natgw_ids[0]
#  }

  tags = merge(local.common_tags, {
    Name = format("%s-%s-%s-tgw-rtb", var.customer, var.project, var.environment)
  })
}

resource "aws_route_table_association" "rt-subnet-assoc-tgw-3a" {
  subnet_id      = aws_subnet.subnet-tgw-3a.id
  route_table_id = aws_route_table.tgw-rt.id
}

resource "aws_route_table_association" "rt-subnet-assoc-tgw-3c" {
  subnet_id      = aws_subnet.subnet-tgw-3c.id
  route_table_id = aws_route_table.tgw-rt.id
}